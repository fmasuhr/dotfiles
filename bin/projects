#!/usr/bin/env bash

# Get authenticated github user as default
GITHUB_USERNAME=${GITHUB_USERNAME:-$(gh api user | jq -r '.login')}

PROJECTS_PATH=${PROJECTS_PATH:-~/github}
STARED_REPOSITORIES=$(gh api users/${GITHUB_USERNAME}/starred --paginate | jq -r '.[] | .full_name')

# Get emails of authenticated github user
EMAILS=($(gh api user/emails --paginate | jq -r '.[] | .email'))

# Configure formating sequences
bold=`tput bold`
green=`tput setaf 2`
reset=`tput sgr0`

for repository in $STARED_REPOSITORIES;
do
  repository_path="${PROJECTS_PATH}/${repository}"

  if [ ! -d $repository_path ]; then
    # Clone repository as it does not exist locally yet

    # if no 'git config user.email' configure one of the github emails
    if [ $(git -C $repository_path config user.email) == '(none)' ]; then
      echo "Select the git config user.email for '${repository}'"

      # List available emails
      for i in "${!EMAILS[@]}"; do
        printf "%s %s\n" "$((i + 1))" "${EMAILS[$i]}"
      done

      # Get email index input until correct (within range)
      unset email_index # reset after each repository
      while [[ ! $email_index =~ ^[0-9]+$ ]]; do
        read -p "Choose the email to be configured in 'git config user.email' [1-${#EMAILS[@]}]: " email_index
        ! [[ $email_index -ge 1 && $email_index -le ${#EMAILS[@]}  ]] && unset email_index
      done

      gh repo clone "git@github.com:${repository}.git" $repository_path && git -C $repository_path config user.email "${EMAILS[$((email_index - 1))]}" &
    else
      gh repo clone "git@github.com:${repository}.git" $repository_path &
    fi
  else
    # Pull latest changes into current branch

    if ! error=$(git -C $repository_path pull --rebase=false --quiet 2>&1); then \
      echo -e "\
${bold} ==> ${repository_path}${reset}\n\
${error}\n"; \
    fi &
  fi
done

# Wait for all background tasks to be finished
wait

echo "${green}All projects are synced${reset}"
